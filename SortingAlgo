package Sort;

import java.util.ArrayList;
import java.util.Scanner;

public class Arraylist1 {
	public static void main(String[] args) {
	        ArrayList<Integer> arr = new ArrayList<>();
	        Scanner scanner = new Scanner(System.in);
	        arr.add(2);
	        arr.add(10);
	        arr.add(15);
	        arr.add(4);
	        arr.add(1);
	        arr.add(18);
	        arr.add(16);
	        arr.add(5);
	        
	        System.out.println("Current Arraylist: " + arr);
	        
	        while (true) {
	            System.out.println("1. Add element to array");
	            System.out.println("2. Sort array");
	            System.out.println("3. Exit");
	            System.out.print("Choose an option: ");
	            int option = scanner.nextInt();

	            switch (option) {
	                case 1:
	                    System.out.print("Enter an element to add: ");
	                    int element = scanner.nextInt();
	                    arr.add(element);
	                    System.out.println("Arraylist: " + arr);
	                    break;
	                case 2:
	                    insertionSort(arr);
	                    System.out.println("Sorted array: " + arr);
	                    break;
	                case 3:
	                    System.out.println("Exiting...");
	                    return;
	                default:
	                    System.out.println("Invalid option. Please try again.");
	            }
	        }
	    }

	    public static void insertionSort(ArrayList<Integer> arr) {
	        int n = arr.size();
	        for (int i = 1; i < n; i++) {
	            int key = arr.get(i);
	            int j = i - 1;
	            while (j >= 0 && arr.get(j) > key) {
	                arr.set(j + 1, arr.get(j));
	                j--;
	            }
	            arr.set(j + 1, key);
	            System.out.println("After pass " + i + ": " + arr);
	        }
	    }
	}
	
package sortAlgorithmPart2;

import java.util.ArrayList;
import java.util.Scanner;
public class Exercise {

public static void sortStack(Stack<Integer> firstStack) {
        Stack<Integer> newStack = new Stack<>();
        while (!firstStack.isEmpty()) {
            int temp = firstStack.pop();
            while (!newStack.isEmpty() && newStack.peek() < temp) {
            	firstStack.push(newStack.pop());
            }
            newStack.push(temp);
        }
        while (!newStack.isEmpty()) {
        	firstStack.push(newStack.pop());
      	  for (Integer element : firstStack) {
              System.out.print(element + " ");
          }
          System.out.println();
        }
    }

public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    Library book = new Library();
    int choice;
    boolean exit = false;
    boolean stop = false;

    while (!exit) {
        System.out.println("Menu");
        System.out.println("1. Array");
        System.out.println("2. Arraylist");
        System.out.println("3. Stack");
        

        choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
        case 1:
            System.out.println("Enter Array: ");
            String Array = scanner.nextLine();
            book.addArray(Array);
            break;
        case 2:
            if (!book.book.isEmpty()) {
                System.out.println("Enter ArrayList: ");
                String ArrayList = scanner.nextLine();
                System.out.println("Enter Index: ");
                int index2 = scanner.nextInt();
                scanner.nextLine();
                book.insert(ArrayList, ArrayList);
            } else {
                System.out.println("Please add Array before using this function");
            }
            break;
        case 3:
          
        while(!stop) {
        System.out.println("Enter Value Here: ");
        stack.push(scanner.nextInt());
        System.out.println("Stop? true if yes false if no");
        stop = scan.nextBoolean();
        for (Integer element : stack) {
            System.out.print(element + " ");
        }
        System.out.println();
        }
        System.out.print("Original Stack: ");
        for (Integer element : stack) {
            System.out.print(element + " ");
        }
        System.out.println();

        sortStack(stack);
        
        System.out.print("Sorted Stack: ");
        for (Integer element : stack) {
            System.out.print(element + " ");
        }
        System.out.println();
            break;
        }
